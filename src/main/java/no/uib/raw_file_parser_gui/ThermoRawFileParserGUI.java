package no.uib.raw_file_parser_gui;

import java.awt.Color;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileFilter;
import java.util.StringTokenizer;

/**
 * A simple graphical user interface for running the ThermoRawFileParser.
 *
 * @author Harald Barsnes
 */
public class ThermoRawFileParserGUI extends javax.swing.JFrame {

    /**
     * The horizontal padding used before and after the text in the titled
     * borders. (Needed to make it look as good in Java 7 as it did in Java
     * 6...)
     */
    public static String TITLED_BORDER_HORIZONTAL_PADDING = "";
    /**
     * The process to be executed as array.
     */
    ArrayList process_name_array = new ArrayList();
    /**
     * The process builder.
     */
    ProcessBuilder pb;
    /**
     * The process.
     */
    Process p;
    /**
     * The raw files.
     */
    private ArrayList<File> rawFiles = new ArrayList<>();
    /**
     * The last selected folder.
     */
    private File lastSelectedFolder = null;
    /**
     * If true, the command line is printed to the progress text area before
     * starting the process.
     */
    private boolean debug = false;

    /**
     * Creates a new RawFileParserGUI.
     */
    public ThermoRawFileParserGUI() {
        initComponents();

        spectrumFormatComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        metadataFormatComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        allDetectorsComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        gzippedComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        lowerPeakPickingLevelComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        upperPeakPickingLevelComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        errorHandlingComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        compressionComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        mgfTitlesComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        lowerMsLevelComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        upperMsLevelComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        exceptionsComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));

        // set the font color for the titled borders, looks better than the default black
        UIManager.put("TitledBorder.titleColor", new Color(59, 59, 59));

        // update the horizontal padding for the titled borders
        ((TitledBorder) inputAndOutputPanel.getBorder()).setTitle(TITLED_BORDER_HORIZONTAL_PADDING + ((TitledBorder) inputAndOutputPanel.getBorder()).getTitle() + TITLED_BORDER_HORIZONTAL_PADDING);

        // add the version number to the title bar
        setTitle("ThermoRawFileParserGUI " + new no.uib.raw_file_parser_gui.Properties().getVersion());

        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/ThermoRawFileParserGUI.gif")));

        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        inputAndOutputPanel = new javax.swing.JPanel();
        rawFileTextField = new javax.swing.JTextField();
        browseRawFileButton = new javax.swing.JButton();
        rawFileLabel = new javax.swing.JLabel();
        outputFolderLabel = new javax.swing.JLabel();
        outputFolderTextField = new javax.swing.JTextField();
        browseOutputFolderButton = new javax.swing.JButton();
        convertButton = new javax.swing.JButton();
        githubLinkLabel = new javax.swing.JLabel();
        aboutButton = new javax.swing.JButton();
        progressPanel = new javax.swing.JPanel();
        progressScrollPane = new javax.swing.JScrollPane();
        progressJTextArea = new javax.swing.JTextArea();
        totalProgressBar = new javax.swing.JProgressBar();
        fileProgressBar = new javax.swing.JProgressBar();
        settingsPanel = new javax.swing.JPanel();
        spectrumFormatLabel = new javax.swing.JLabel();
        spectrumFormatComboBox = new javax.swing.JComboBox<>();
        mgfTitlesLabel = new javax.swing.JLabel();
        mgfTitlesComboBox = new javax.swing.JComboBox<>();
        msLevelsLabel = new javax.swing.JLabel();
        lowerMsLevelComboBox = new javax.swing.JComboBox<>();
        msLevelDivderLabel = new javax.swing.JLabel();
        upperMsLevelComboBox = new javax.swing.JComboBox<>();
        peakPickingLabel = new javax.swing.JLabel();
        metadataFormatLabel = new javax.swing.JLabel();
        metadataFormatComboBox = new javax.swing.JComboBox<>();
        allDetectorsLabel = new javax.swing.JLabel();
        allDetectorsComboBox = new javax.swing.JComboBox<>();
        gzippedLabel = new javax.swing.JLabel();
        gzippedComboBox = new javax.swing.JComboBox<>();
        compressionLabel = new javax.swing.JLabel();
        compressionComboBox = new javax.swing.JComboBox<>();
        errorHandlingLabel = new javax.swing.JLabel();
        errorHandlingComboBox = new javax.swing.JComboBox<>();
        exceptionsLabel = new javax.swing.JLabel();
        exceptionsComboBox = new javax.swing.JComboBox<>();
        lowerPeakPickingLevelComboBox = new javax.swing.JComboBox<>();
        msLevelDivderLabel1 = new javax.swing.JLabel();
        upperPeakPickingLevelComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ThermoRawFileParserGUI");
        setBackground(new java.awt.Color(230, 230, 230));
        setMinimumSize(new java.awt.Dimension(600, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        inputAndOutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input & Output"));
        inputAndOutputPanel.setOpaque(false);

        rawFileTextField.setEditable(false);
        rawFileTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rawFileTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rawFileTextFieldMouseClicked(evt);
            }
        });

        browseRawFileButton.setText("Browse");
        browseRawFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseRawFileButtonActionPerformed(evt);
            }
        });

        rawFileLabel.setText("Raw File(s)");

        outputFolderLabel.setText("Output Folder");

        outputFolderTextField.setEditable(false);
        outputFolderTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        browseOutputFolderButton.setText("Browse");
        browseOutputFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseOutputFolderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputAndOutputPanelLayout = new javax.swing.GroupLayout(inputAndOutputPanel);
        inputAndOutputPanel.setLayout(inputAndOutputPanelLayout);
        inputAndOutputPanelLayout.setHorizontalGroup(
            inputAndOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputAndOutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputAndOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputAndOutputPanelLayout.createSequentialGroup()
                        .addComponent(rawFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rawFileTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseRawFileButton)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputAndOutputPanelLayout.createSequentialGroup()
                        .addComponent(outputFolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(outputFolderTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseOutputFolderButton)
                        .addContainerGap())))
        );
        inputAndOutputPanelLayout.setVerticalGroup(
            inputAndOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputAndOutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputAndOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rawFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseRawFileButton)
                    .addComponent(rawFileLabel))
                .addGap(0, 0, 0)
                .addGroup(inputAndOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseOutputFolderButton)
                    .addComponent(outputFolderLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        convertButton.setBackground(new java.awt.Color(0, 153, 0));
        convertButton.setFont(convertButton.getFont().deriveFont(convertButton.getFont().getStyle() | java.awt.Font.BOLD));
        convertButton.setForeground(new java.awt.Color(255, 255, 255));
        convertButton.setText("Start the Conversion!");
        convertButton.setToolTipText("Click here to start the conversion");
        convertButton.setEnabled(false);
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        githubLinkLabel.setText("<html>For more details, see <br><a href=\\\"https://github.com/compomics/ThermoRawFileParserGUI\\\">ThermoRawFileParserGUI at GitHub</a></html>");
        githubLinkLabel.setToolTipText("Open the ThermoRawFileParserGUI GitHub page");
        githubLinkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                githubLinkLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                githubLinkLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                githubLinkLabelMouseExited(evt);
            }
        });

        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/thermo-raw-file-parser-gui.png"))); // NOI18N
        aboutButton.setToolTipText("Open the ThermoRawFileParserGUI web page");
        aboutButton.setBorder(null);
        aboutButton.setBorderPainted(false);
        aboutButton.setContentAreaFilled(false);
        aboutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aboutButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aboutButtonMouseExited(evt);
            }
        });
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        progressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Progress"));
        progressPanel.setOpaque(false);

        progressJTextArea.setEditable(false);
        progressJTextArea.setColumns(20);
        progressJTextArea.setLineWrap(true);
        progressJTextArea.setRows(5);
        progressJTextArea.setWrapStyleWord(true);
        progressScrollPane.setViewportView(progressJTextArea);

        totalProgressBar.setToolTipText("Total Progress");
        totalProgressBar.setString("");
        totalProgressBar.setStringPainted(true);

        fileProgressBar.setToolTipText("Individual File Progress");
        fileProgressBar.setStringPainted(true);

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressScrollPane)
                    .addGroup(progressPanelLayout.createSequentialGroup()
                        .addComponent(totalProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        progressPanelLayout.setVerticalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addComponent(progressScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(totalProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        settingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
        settingsPanel.setOpaque(false);

        spectrumFormatLabel.setText("Spectrum");

        spectrumFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MGF", "mzML", "mzML (indexed)", "Parquet", "None" }));
        spectrumFormatComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spectrumFormatComboBoxActionPerformed(evt);
            }
        });

        mgfTitlesLabel.setText("MGF Titles");

        mgfTitlesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "Include precursor scan number" }));
        mgfTitlesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mgfTitlesComboBoxActionPerformed(evt);
            }
        });

        msLevelsLabel.setText("MS Levels");

        lowerMsLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "1", "2", "3" }));
        lowerMsLevelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerMsLevelComboBoxActionPerformed(evt);
            }
        });

        msLevelDivderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        msLevelDivderLabel.setText("-");

        upperMsLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));
        upperMsLevelComboBox.setEnabled(false);
        upperMsLevelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperMsLevelComboBoxActionPerformed(evt);
            }
        });

        peakPickingLabel.setText("Peak Picking");

        metadataFormatLabel.setText("Metadata");

        metadataFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JSON", "TXT", "None" }));
        metadataFormatComboBox.setSelectedIndex(2);
        metadataFormatComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metadataFormatComboBoxActionPerformed(evt);
            }
        });

        allDetectorsLabel.setText("All Detectors");

        allDetectorsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        allDetectorsComboBox.setSelectedIndex(1);
        allDetectorsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allDetectorsComboBoxActionPerformed(evt);
            }
        });

        gzippedLabel.setText("GZipped");

        gzippedComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        gzippedComboBox.setSelectedIndex(1);
        gzippedComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gzippedComboBoxActionPerformed(evt);
            }
        });

        compressionLabel.setText("Compression");

        compressionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "zlib", "None" }));
        compressionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressionComboBoxActionPerformed(evt);
            }
        });

        errorHandlingLabel.setText("Errors");

        errorHandlingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ignore missing instrument properties", "Stop conversion if instrument properties are missing" }));
        errorHandlingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorHandlingComboBoxActionPerformed(evt);
            }
        });

        exceptionsLabel.setText("Exceptions");
        exceptionsLabel.setToolTipText("Include reference and exception data");

        exceptionsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Exclude reference and exception data", "Include reference and exception data" }));
        exceptionsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exceptionsComboBoxActionPerformed(evt);
            }
        });

        lowerPeakPickingLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "MS1", "MS2", "MS3", "All" }));
        lowerPeakPickingLevelComboBox.setSelectedIndex(4);
        lowerPeakPickingLevelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lowerPeakPickingLevelComboBoxActionPerformed(evt);
            }
        });

        msLevelDivderLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        msLevelDivderLabel1.setText("-");

        upperPeakPickingLevelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MS1", "MS2", "MS3" }));
        upperPeakPickingLevelComboBox.setEnabled(false);
        upperPeakPickingLevelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upperPeakPickingLevelComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spectrumFormatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gzippedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(metadataFormatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spectrumFormatComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(metadataFormatComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(gzippedComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(errorHandlingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(errorHandlingComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(mgfTitlesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mgfTitlesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(allDetectorsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(allDetectorsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(peakPickingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lowerPeakPickingLevelComboBox, 0, 212, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(msLevelDivderLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(upperPeakPickingLevelComboBox, 0, 212, Short.MAX_VALUE))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(msLevelsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lowerMsLevelComboBox, 0, 212, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(msLevelDivderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(upperMsLevelComboBox, 0, 212, Short.MAX_VALUE))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(compressionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(compressionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                        .addComponent(exceptionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exceptionsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spectrumFormatLabel)
                    .addComponent(spectrumFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mgfTitlesLabel)
                    .addComponent(mgfTitlesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msLevelsLabel)
                    .addComponent(lowerMsLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msLevelDivderLabel)
                    .addComponent(upperMsLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peakPickingLabel)
                    .addComponent(lowerPeakPickingLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msLevelDivderLabel1)
                    .addComponent(upperPeakPickingLevelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(metadataFormatLabel)
                    .addComponent(metadataFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allDetectorsLabel)
                    .addComponent(allDetectorsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exceptionsLabel)
                    .addComponent(exceptionsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gzippedLabel)
                    .addComponent(gzippedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compressionLabel)
                    .addComponent(compressionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(errorHandlingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorHandlingLabel))
                .addContainerGap())
        );

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(aboutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(githubLinkLabel)
                .addGap(76, 76, 76)
                .addComponent(convertButton)
                .addGap(23, 23, 23))
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputAndOutputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputAndOutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(githubLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(convertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addComponent(aboutButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Start the conversion.
     *
     * @param evt
     */
    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed

        boolean valid = true;

        // check the validity of the the ms level range
        if (lowerMsLevelComboBox.getSelectedIndex() != 0
                && lowerMsLevelComboBox.getSelectedIndex() > upperMsLevelComboBox.getSelectedIndex() + 1) {

            JOptionPane.showMessageDialog(this,
                    "The MS level range is not a valid range.",
                    "MS Level Error", JOptionPane.INFORMATION_MESSAGE);

            valid = false;

        }

        // check the validity of the peak picking levels
        if (valid && (lowerPeakPickingLevelComboBox.getSelectedIndex() > 0 && lowerPeakPickingLevelComboBox.getSelectedIndex() < 4)
                && lowerPeakPickingLevelComboBox.getSelectedIndex() > upperPeakPickingLevelComboBox.getSelectedIndex() + 1) {

            JOptionPane.showMessageDialog(this,
                    "The peak picking range is not a valid range.",
                    "Peak Picking Error", JOptionPane.INFORMATION_MESSAGE);

            valid = false;

        }

        if (valid) {

            // prepare for processing
            progressJTextArea.setText(null);
            convertButton.setEnabled(false);
            setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/ThermoRawFileParserGUI-orange.gif")));

            // full path to executable
            File thermoRawFileParserExecutable = new File(getJarFilePath(this.getClass().getResource("ThermoRawFileParserGUI.class").getPath(), "ThermoRawFileParserGUI")
                    + File.separator + "resources" + File.separator + "ThermoRawFileParser" + File.separator + "ThermoRawFileParser.exe");
            thermoRawFileParserExecutable.setExecutable(true);

            // start the conversion
            new Thread(new Runnable() {
                public void run() {

                    totalProgressBar.setMaximum(rawFiles.size());
                    totalProgressBar.setValue(0);
                    int fileConversionCounter = 0;

                    for (File tempRawFile : rawFiles) {

                        totalProgressBar.setString("Converting File " + ++fileConversionCounter + "/" + rawFiles.size());
                        fileProgressBar.setValue(0);

                        // clear the previous process
                        process_name_array.clear();

                        // use mono if not on windows
                        String operatingSystem = System.getProperty("os.name").toLowerCase();
                        if (!operatingSystem.contains("windows")) {
                            String monoPath = "mono";

                            // modern mac os x versions need a specific mono path
                            if (operatingSystem.contains("mac os x")) {
                                StringTokenizer versionTokens = new StringTokenizer(System.getProperty("os.version"), ".");
                                if (versionTokens.countTokens() > 1) {
                                    int mainVersion = Integer.parseInt(versionTokens.nextToken());
                                    int subversion = Integer.parseInt(versionTokens.nextToken());
                                    if (mainVersion >= 10 && subversion >= 11) {
                                        monoPath = "/Library/Frameworks/Mono.framework/Versions/Current/bin/mono";
                                    }
                                }
                            }
                            process_name_array.add(monoPath);
                        }

                        // add the executable
                        process_name_array.add(thermoRawFileParserExecutable.getAbsolutePath());

                        // add the conversion parameters
                        process_name_array.add("-i=" + tempRawFile.getAbsolutePath());
                        process_name_array.add("-o=" + outputFolderTextField.getText());
                        if (spectrumFormatComboBox.getSelectedIndex() < spectrumFormatComboBox.getItemCount() - 1) {
                            process_name_array.add("-f=" + spectrumFormatComboBox.getSelectedIndex());
                        }
                        if (metadataFormatComboBox.getSelectedIndex() < metadataFormatComboBox.getItemCount() - 1) {
                            process_name_array.add("-m=" + metadataFormatComboBox.getSelectedIndex());
                        }
                        if (gzippedComboBox.getSelectedIndex() == 0) {
                            process_name_array.add("-g");
                        }
                        if (lowerPeakPickingLevelComboBox.getSelectedIndex() == 4) {
                            // peak picking all ms levels
                        } else if (lowerPeakPickingLevelComboBox.getSelectedIndex() == 0) {
                            // no peak picking at all
                            process_name_array.add("-p");
                        } else if (lowerPeakPickingLevelComboBox.getSelectedIndex() < 4) {
                            
                            // peak pick only certain ms levels
                            int lowerLevel = lowerPeakPickingLevelComboBox.getSelectedIndex();
                            int upperLevel = upperPeakPickingLevelComboBox.getSelectedIndex() + 1;

                            String noPeakPicking = "";
                            
                            for (int i = 1; i < 4; i++) {
                                
                                if (i < lowerLevel || i > upperLevel) {
                                    if (!noPeakPicking.isEmpty()) {
                                        noPeakPicking += ",";
                                    }
                                    noPeakPicking += i;
                                }

                            }
                            
                            process_name_array.add("-p="+ noPeakPicking);
                        }
                        if (compressionComboBox.getSelectedIndex() == 1) {
                            process_name_array.add("-z");
                        }
                        if (allDetectorsComboBox.getSelectedIndex() == 1) {
                            process_name_array.add("-a");
                        }
                        if (errorHandlingComboBox.getSelectedIndex() == 0) {
                            process_name_array.add("-e");
                        }
                        if (spectrumFormatComboBox.getSelectedIndex() == 0
                                && mgfTitlesComboBox.getSelectedIndex() == 1) {
                            process_name_array.add("-P");
                        }
                        if (exceptionsComboBox.getSelectedIndex() == 1) {
                            process_name_array.add("-x");
                        }
                        if (lowerMsLevelComboBox.getSelectedIndex() != 0) {
                            process_name_array.add("-L="
                                    + (lowerMsLevelComboBox.getSelectedIndex())
                                    + "-"
                                    + (upperMsLevelComboBox.getSelectedIndex() + 1)
                            );
                        }

                        // print the command to the log area
                        if (debug) {
                            progressJTextArea.append("ThermoRawFileParser command:" + System.getProperty("line.separator"));
                            for (Object element : process_name_array) {
                                progressJTextArea.append(element + " ");
                            }
                            progressJTextArea.append(System.getProperty("line.separator") + System.getProperty("line.separator"));
                        }

                        // set up the process and redirect the error stream
                        pb = new ProcessBuilder(process_name_array);
                        pb.redirectErrorStream(true);

                        try {
                            p = pb.start();

                            // get the inputstream from the process
                            InputStream inputStream = p.getInputStream();

                            Scanner scanner = new Scanner(inputStream);
                            scanner.useDelimiter("\\s|\\n");

                            boolean lastLineWasEmpty = false;

                            // get input from scanner, send to progress area
                            while (scanner.hasNext()) {
                                String temp = scanner.next();

                                if (!temp.isEmpty()) {

                                    if (temp.endsWith("%")) {
                                        fileProgressBar.setValue(fileProgressBar.getValue() + 10);
                                    } else {
                                        progressJTextArea.append(temp + " ");
                                        lastLineWasEmpty = false;
                                    }

                                    progressJTextArea.setCaretPosition(progressJTextArea.getDocument().getLength());
                                } else {
                                    if (!lastLineWasEmpty) {
                                        progressJTextArea.append("\n");
                                    }
                                    lastLineWasEmpty = true;
                                }
                            }

                            scanner.close();
                            inputStream.close();

                        } catch (IOException ex) {
                            progressJTextArea.append(ex.getMessage());
                            ex.printStackTrace();
                        } finally {
                            // wait for the process to terminate
                            try {
                                p.waitFor();
                                totalProgressBar.setValue(fileConversionCounter);
                                progressJTextArea.append(System.getProperty("line.separator")
                                        + "Conversion complete for " + tempRawFile.getAbsolutePath()
                                        + System.getProperty("line.separator") + System.getProperty("line.separator"));
                                progressJTextArea.setCaretPosition(progressJTextArea.getDocument().getLength());
                            } catch (InterruptedException e) {
                                if (p != null) {
                                    p.destroy();
                                }
                            }
                        }
                    }

                    progressJTextArea.append("Done");
                    progressJTextArea.setCaretPosition(progressJTextArea.getDocument().getLength());
                    convertButton.setEnabled(true);
                    setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/ThermoRawFileParserGUI.gif")));
                }
            }, "ConvertThread").start();
        }

    }//GEN-LAST:event_convertButtonActionPerformed

    /**
     * Open the ThermoRawFileParserGUI GitHub page.
     *
     * @param evt
     */
    private void githubLinkLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_githubLinkLabelMouseClicked
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        BareBonesBrowserLaunch.openURL("https://github.com/compomics/ThermoRawFileParserGUI");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_githubLinkLabelMouseClicked

    /**
     * Change the cursor into a hand cursor.
     *
     * @param evt
     */
    private void githubLinkLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_githubLinkLabelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_githubLinkLabelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void githubLinkLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_githubLinkLabelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_githubLinkLabelMouseExited

    /**
     * Change the cursor into a hand cursor.
     *
     * @param evt
     */
    private void aboutButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutButtonMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_aboutButtonMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void aboutButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutButtonMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_aboutButtonMouseExited

    /**
     * Open the ThermoRawFileParserGUI GitHub page.
     *
     * @param evt
     */
    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        BareBonesBrowserLaunch.openURL("https://github.com/compomics/ThermoRawFileParserGUI");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_aboutButtonActionPerformed

    /**
     * Opens a file browser to select the raw file to convert.
     *
     * @param evt
     */
    private void browseRawFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseRawFileButtonActionPerformed

        JFileChooser fc = new JFileChooser(lastSelectedFolder);

        FileFilter filter = new FileFilter() {
            @Override
            public boolean accept(File myFile) {
                String lowercaseName = myFile.getName().toLowerCase();
                if (lowercaseName.endsWith(".raw")) {
                    return true;
                }
                return myFile.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Thermo Raw Files (.raw)";
            }
        };
        fc.setFileFilter(filter);
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setMultiSelectionEnabled(true);
        int result = fc.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {

            rawFiles = new ArrayList<>();

            for (File newFile : fc.getSelectedFiles()) {
                if (newFile.isDirectory()) {
                    lastSelectedFolder = newFile;
                    File[] tempFiles = newFile.listFiles();
                    for (File file : tempFiles) {
                        String lowercaseName = file.getName().toLowerCase();
                        if (lowercaseName.endsWith(".raw")) {
                            rawFiles.add(file);
                        }
                    }
                } else {
                    String lowercaseName = newFile.getName().toLowerCase();
                    if (lowercaseName.endsWith(".raw")) {
                        rawFiles.add(newFile);
                        lastSelectedFolder = newFile.getParentFile();
                    }
                }
            }

            if (rawFiles.size() == 1) {
                rawFileTextField.setText(rawFiles.get(0).getAbsolutePath());
            } else {
                rawFileTextField.setText(rawFiles.size() + " files selected");
            }

            if (rawFileTextField.getText().length() > 70) {
                rawFileTextField.setHorizontalAlignment(JTextField.LEADING);
            } else {
                rawFileTextField.setHorizontalAlignment(JTextField.CENTER);
            }

            resetGui();
        }

        validateInput();

    }//GEN-LAST:event_browseRawFileButtonActionPerformed

    /**
     * Open a file browser to select the output folder.
     *
     * @param evt
     */
    private void browseOutputFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseOutputFolderButtonActionPerformed

        JFileChooser fc = new JFileChooser(lastSelectedFolder);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(false);

        int result = fc.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {

            File tempDir = fc.getSelectedFile();

            if (!tempDir.exists()) {
                int value = JOptionPane.showConfirmDialog(this, "The folder \'"
                        + tempDir.getAbsolutePath() + "\' does not exist.\n"
                        + "Do you want to create it?",
                        "Create Folder?", JOptionPane.YES_NO_OPTION);
                if (value == JOptionPane.NO_OPTION) {
                    return;
                } else { // yes option selected
                    boolean success = tempDir.mkdir();

                    if (!success) {
                        JOptionPane.showMessageDialog(this,
                                "Failed to create the folder. "
                                + "Please create it manually and then select it.",
                                "File Error", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                }
            }

            File outputFolder = fc.getSelectedFile();
            outputFolderTextField.setText(outputFolder.getAbsolutePath());

            if (outputFolderTextField.getText().length() > 70) {
                outputFolderTextField.setHorizontalAlignment(JTextField.LEADING);
            } else {
                outputFolderTextField.setHorizontalAlignment(JTextField.CENTER);
            }

            lastSelectedFolder = outputFolder;

            resetGui();
        }

        validateInput();
    }//GEN-LAST:event_browseOutputFolderButtonActionPerformed

    /**
     * Display the list of selected raw files.
     *
     * @param evt the mouse event
     */
    private void rawFileTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rawFileTextFieldMouseClicked
        if (!rawFiles.isEmpty()) {
            ArrayList<File> tempRawFiles = new ArrayList<>(rawFiles);
            FileDisplayDialog fileDisplayDialog = new FileDisplayDialog(this, tempRawFiles, true);
            if (!fileDisplayDialog.canceled()) {
                tempRawFiles = fileDisplayDialog.getSelectedFiles();

                if (tempRawFiles.size() == 1) {
                    rawFileTextField.setText(tempRawFiles.get(0).getAbsolutePath());
                } else {
                    rawFileTextField.setText(tempRawFiles.size() + " files selected");
                }

                rawFiles.clear();
                for (File file : tempRawFiles) {
                    rawFiles.add(file);
                }
                validateInput();
            }
        }
    }//GEN-LAST:event_rawFileTextFieldMouseClicked

    /**
     * Shut down the conversion process if the window is closed by the user.
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (p != null) {
            p.destroy();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * Clear the old results and validate the input.
     *
     * @param evt
     */
    private void spectrumFormatComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spectrumFormatComboBoxActionPerformed

        mgfTitlesLabel.setEnabled(spectrumFormatComboBox.getSelectedIndex() == 0);
        mgfTitlesComboBox.setEnabled(spectrumFormatComboBox.getSelectedIndex() == 0);

        resetGui();
        validateInput();
    }//GEN-LAST:event_spectrumFormatComboBoxActionPerformed

    /**
     * Clear the old results and validate the input.
     *
     * @param evt
     */
    private void metadataFormatComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metadataFormatComboBoxActionPerformed
        resetGui();
        validateInput();
    }//GEN-LAST:event_metadataFormatComboBoxActionPerformed

    /**
     * Clear the old results.
     *
     * @param evt
     */
    private void gzippedComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gzippedComboBoxActionPerformed
        resetGui();
    }//GEN-LAST:event_gzippedComboBoxActionPerformed

    /**
     * Clear the old results.
     *
     * @param evt
     */
    private void errorHandlingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorHandlingComboBoxActionPerformed
        resetGui();
    }//GEN-LAST:event_errorHandlingComboBoxActionPerformed

    /**
     * Clear the old results.
     *
     * @param evt
     */
    private void compressionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressionComboBoxActionPerformed
        resetGui();
    }//GEN-LAST:event_compressionComboBoxActionPerformed

    /**
     * Clear the old results.
     *
     * @param evt
     */
    private void allDetectorsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allDetectorsComboBoxActionPerformed
        resetGui();
    }//GEN-LAST:event_allDetectorsComboBoxActionPerformed

    /**
     * Clear the old results.
     *
     * @param evt
     */
    private void mgfTitlesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mgfTitlesComboBoxActionPerformed
        resetGui();
    }//GEN-LAST:event_mgfTitlesComboBoxActionPerformed

    /**
     * Clear the old results.
     *
     * @param evt
     */
    private void upperMsLevelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperMsLevelComboBoxActionPerformed
        resetGui();
    }//GEN-LAST:event_upperMsLevelComboBoxActionPerformed

    /**
     * Clear the old results.
     *
     * @param evt
     */
    private void lowerMsLevelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerMsLevelComboBoxActionPerformed
        upperMsLevelComboBox.setEnabled(lowerMsLevelComboBox.getSelectedIndex() != 0);
        resetGui();
    }//GEN-LAST:event_lowerMsLevelComboBoxActionPerformed

    /**
     * Clear the old results.
     *
     * @param evt
     */
    private void exceptionsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exceptionsComboBoxActionPerformed
        resetGui();
    }//GEN-LAST:event_exceptionsComboBoxActionPerformed

    /**
     * Clear the old results.
     *
     * @param evt
     */
    private void lowerPeakPickingLevelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lowerPeakPickingLevelComboBoxActionPerformed
        upperPeakPickingLevelComboBox.setEnabled(
                lowerPeakPickingLevelComboBox.getSelectedIndex() > 0
                && lowerPeakPickingLevelComboBox.getSelectedIndex() < 4
        );
        resetGui();
    }//GEN-LAST:event_lowerPeakPickingLevelComboBoxActionPerformed

    /**
     * Clear the old results.
     *
     * @param evt
     */
    private void upperPeakPickingLevelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upperPeakPickingLevelComboBoxActionPerformed
        resetGui();
    }//GEN-LAST:event_upperPeakPickingLevelComboBoxActionPerformed

    /**
     * The main method used to start ThermoRawFileParserGUI.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        // set the Nimbus look and feel
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(ThermoRawFileParserGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }

        // need to add some padding to the text in the titled borders on Java 1.7 
        if (!System.getProperty("java.version").startsWith("1.6")) {
            TITLED_BORDER_HORIZONTAL_PADDING = "   ";
        }

        // create and display the form
        new ThermoRawFileParserGUI();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JComboBox<String> allDetectorsComboBox;
    private javax.swing.JLabel allDetectorsLabel;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton browseOutputFolderButton;
    private javax.swing.JButton browseRawFileButton;
    private javax.swing.JComboBox<String> compressionComboBox;
    private javax.swing.JLabel compressionLabel;
    private javax.swing.JButton convertButton;
    private javax.swing.JComboBox<String> errorHandlingComboBox;
    private javax.swing.JLabel errorHandlingLabel;
    private javax.swing.JComboBox<String> exceptionsComboBox;
    private javax.swing.JLabel exceptionsLabel;
    private javax.swing.JProgressBar fileProgressBar;
    private javax.swing.JLabel githubLinkLabel;
    private javax.swing.JComboBox<String> gzippedComboBox;
    private javax.swing.JLabel gzippedLabel;
    private javax.swing.JPanel inputAndOutputPanel;
    private javax.swing.JComboBox<String> lowerMsLevelComboBox;
    private javax.swing.JComboBox<String> lowerPeakPickingLevelComboBox;
    private javax.swing.JComboBox<String> metadataFormatComboBox;
    private javax.swing.JLabel metadataFormatLabel;
    private javax.swing.JComboBox<String> mgfTitlesComboBox;
    private javax.swing.JLabel mgfTitlesLabel;
    private javax.swing.JLabel msLevelDivderLabel;
    private javax.swing.JLabel msLevelDivderLabel1;
    private javax.swing.JLabel msLevelsLabel;
    private javax.swing.JLabel outputFolderLabel;
    private javax.swing.JTextField outputFolderTextField;
    private javax.swing.JLabel peakPickingLabel;
    private javax.swing.JTextArea progressJTextArea;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JScrollPane progressScrollPane;
    private javax.swing.JLabel rawFileLabel;
    private javax.swing.JTextField rawFileTextField;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JComboBox<String> spectrumFormatComboBox;
    private javax.swing.JLabel spectrumFormatLabel;
    private javax.swing.JProgressBar totalProgressBar;
    private javax.swing.JComboBox<String> upperMsLevelComboBox;
    private javax.swing.JComboBox<String> upperPeakPickingLevelComboBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns the path to the jar file. Verifies that the path exists and tries
     * to decode from Unicode if not.
     *
     * @param classPath the class path to extract the jar file path from
     * @param toolName the name of the tool, e.g., "PeptideShaker" or
     * "SearchGUI".
     * @return the path to the jar file
     */
    public static String getJarFilePath(String classPath, String toolName) {

        String path = classPath;
        toolName = toolName + "-";

        if (path.lastIndexOf("/" + toolName) != -1) {
            // remove starting 'file:' tag if there
            if (path.startsWith("file:")) {
                path = path.substring("file:".length(), path.lastIndexOf("/" + toolName));
            } else {
                path = path.substring(0, path.lastIndexOf("/" + toolName));
            }
            path = path.replace("%20", " ");
            path = path.replace("%5b", "[");
            path = path.replace("%5d", "]");

            if (System.getProperty("os.name").lastIndexOf("Windows") != -1) {
                path = path.replace("/", "\\");
            }
        } else {
            path = ".";
        }

        // try to decode the path to fix any special characters
        try {
            if (!new File(path).exists()) {
                path = URLDecoder.decode(path, "UTF-8");
            }
            if (!new File(path).exists()) {
                System.out.println(path + " not found!");
                FileNotFoundException ex = new FileNotFoundException(path + " not found!");
                ex.printStackTrace();
            }
        } catch (UnsupportedEncodingException ex) {
            System.out.println("Error reading file " + path + "!");
            ex.printStackTrace();
        }

        return path;
    }

    /**
     * Validate that the required input as been provided and enable or disable
     * the convert button.
     */
    private void validateInput() {
        convertButton.setEnabled(rawFileTextField.getText().length() > 0 && outputFolderTextField.getText().length() > 0
                && !(spectrumFormatComboBox.getSelectedIndex() == spectrumFormatComboBox.getItemCount() - 1
                && metadataFormatComboBox.getSelectedIndex() == metadataFormatComboBox.getItemCount() - 1));
    }

    /**
     * Clear the log and resets the progress bars.
     */
    private void resetGui() {
        progressJTextArea.setText(null);
        totalProgressBar.setValue(0);
        totalProgressBar.setString("");
        fileProgressBar.setValue(0);
        fileProgressBar.setString(null);
    }
}
