package no.uib.raw_file_parser_gui;

import java.awt.Color;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileFilter;

/**
 * A simple graphical user interface for running the ThermoRawFileParser.
 *
 * @author Harald Barsnes
 */
public class ThermoRawFileParserGUI extends javax.swing.JFrame {

    /**
     * The horizontal padding used before and after the text in the titled
     * borders. (Needed to make it look as good in Java 7 as it did in Java
     * 6...)
     */
    public static String TITLED_BORDER_HORIZONTAL_PADDING = "";
    /**
     * The process to be executed as array.
     */
    ArrayList process_name_array = new ArrayList();
    /**
     * The process builder.
     */
    ProcessBuilder pb;
    /**
     * The process.
     */
    Process p;
    /**
     * The raw files.
     */
    private ArrayList<File> rawFiles = new ArrayList<>();
    /**
     * If true, the command line is printed to the progress text area before
     * starting the process.
     */
    private boolean debug = false;

    /**
     * Creates a new RawFileParserGUI.
     */
    public ThermoRawFileParserGUI() {
        initComponents();

        spectrumFormatComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        metadataFormatComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        gzippedComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        peakPickingComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        errorHandlingComboBox.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));

        // set the font color for the titled borders, looks better than the default black
        UIManager.put("TitledBorder.titleColor", new Color(59, 59, 59));

        // update the horizontal padding for the titled borders
        ((TitledBorder) inputAndOutputPanel.getBorder()).setTitle(TITLED_BORDER_HORIZONTAL_PADDING + ((TitledBorder) inputAndOutputPanel.getBorder()).getTitle() + TITLED_BORDER_HORIZONTAL_PADDING);

        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/ThermoRawFileParserGUI.gif")));

        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();
        inputAndOutputPanel = new javax.swing.JPanel();
        rawFileTextField = new javax.swing.JTextField();
        browseRawFileButton = new javax.swing.JButton();
        rawFileLabel = new javax.swing.JLabel();
        outputFolderLabel = new javax.swing.JLabel();
        outputFolderTextField = new javax.swing.JTextField();
        browseOutputFolderButton = new javax.swing.JButton();
        convertButton = new javax.swing.JButton();
        githubLinkLabel = new javax.swing.JLabel();
        aboutButton = new javax.swing.JButton();
        progressPanel = new javax.swing.JPanel();
        progressScrollPane = new javax.swing.JScrollPane();
        progressJTextArea = new javax.swing.JTextArea();
        settingsPanel = new javax.swing.JPanel();
        spectrumFormatLabel = new javax.swing.JLabel();
        spectrumFormatComboBox = new javax.swing.JComboBox<>();
        metadataFormatLabel = new javax.swing.JLabel();
        metadataFormatComboBox = new javax.swing.JComboBox<>();
        gzippedLabel = new javax.swing.JLabel();
        gzippedComboBox = new javax.swing.JComboBox<>();
        errorHandlingLabel = new javax.swing.JLabel();
        errorHandlingComboBox = new javax.swing.JComboBox<>();
        peakPickingComboBox = new javax.swing.JComboBox<>();
        peakPickingLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ThermoRawFileParserGUI");
        setBackground(new java.awt.Color(230, 230, 230));
        setMinimumSize(new java.awt.Dimension(600, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        inputAndOutputPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Input & Output"));
        inputAndOutputPanel.setOpaque(false);

        rawFileTextField.setEditable(false);
        rawFileTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rawFileTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rawFileTextFieldMouseClicked(evt);
            }
        });

        browseRawFileButton.setText("Browse");
        browseRawFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseRawFileButtonActionPerformed(evt);
            }
        });

        rawFileLabel.setText("Raw File(s)");

        outputFolderLabel.setText("Output Folder");

        outputFolderTextField.setEditable(false);
        outputFolderTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        browseOutputFolderButton.setText("Browse");
        browseOutputFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseOutputFolderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputAndOutputPanelLayout = new javax.swing.GroupLayout(inputAndOutputPanel);
        inputAndOutputPanel.setLayout(inputAndOutputPanelLayout);
        inputAndOutputPanelLayout.setHorizontalGroup(
            inputAndOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputAndOutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputAndOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputAndOutputPanelLayout.createSequentialGroup()
                        .addComponent(rawFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rawFileTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseRawFileButton)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputAndOutputPanelLayout.createSequentialGroup()
                        .addComponent(outputFolderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(outputFolderTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseOutputFolderButton)
                        .addContainerGap())))
        );
        inputAndOutputPanelLayout.setVerticalGroup(
            inputAndOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputAndOutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputAndOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rawFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseRawFileButton)
                    .addComponent(rawFileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputAndOutputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseOutputFolderButton)
                    .addComponent(outputFolderLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        convertButton.setBackground(new java.awt.Color(0, 153, 0));
        convertButton.setFont(convertButton.getFont().deriveFont(convertButton.getFont().getStyle() | java.awt.Font.BOLD));
        convertButton.setForeground(new java.awt.Color(255, 255, 255));
        convertButton.setText("Start the Conversion!");
        convertButton.setToolTipText("Click here to start the conversion");
        convertButton.setEnabled(false);
        convertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertButtonActionPerformed(evt);
            }
        });

        githubLinkLabel.setText("<html>For more details, see <a href=\\\"https://github.com/compomics/ThermoRawFileParserGUI\\\">ThermoRawFileParserGUI at GitHub</a></html>");
        githubLinkLabel.setToolTipText("Open the ThermoRawFileParserGUI GitHub page");
        githubLinkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                githubLinkLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                githubLinkLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                githubLinkLabelMouseExited(evt);
            }
        });

        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/thermo-raw-file-parser-gui.png"))); // NOI18N
        aboutButton.setToolTipText("Open the ThermoRawFileParserGUI web page");
        aboutButton.setBorder(null);
        aboutButton.setBorderPainted(false);
        aboutButton.setContentAreaFilled(false);
        aboutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aboutButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aboutButtonMouseExited(evt);
            }
        });
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        progressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Progress"));
        progressPanel.setOpaque(false);

        progressJTextArea.setEditable(false);
        progressJTextArea.setColumns(20);
        progressJTextArea.setLineWrap(true);
        progressJTextArea.setRows(5);
        progressJTextArea.setWrapStyleWord(true);
        progressScrollPane.setViewportView(progressJTextArea);

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressScrollPane)
                .addContainerGap())
        );
        progressPanelLayout.setVerticalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addComponent(progressScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addContainerGap())
        );

        settingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
        settingsPanel.setOpaque(false);

        spectrumFormatLabel.setText("Spectrum");

        spectrumFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MGF", "mzML", "mzML (indexed)", "Parquet", "None" }));
        spectrumFormatComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spectrumFormatComboBoxActionPerformed(evt);
            }
        });

        metadataFormatLabel.setText("Metadata");

        metadataFormatComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JSON", "TXT", "None" }));
        metadataFormatComboBox.setSelectedIndex(2);
        metadataFormatComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metadataFormatComboBoxActionPerformed(evt);
            }
        });

        gzippedLabel.setText("GZipped");

        gzippedComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        gzippedComboBox.setSelectedIndex(1);

        errorHandlingLabel.setText("Errors");

        errorHandlingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ignore missing instrument properties", "Stop conversion if instrument properties are missing" }));

        peakPickingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Native Thermo library peak picking", "No peak picking" }));

        peakPickingLabel.setText("Peak picking");

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(spectrumFormatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(gzippedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(metadataFormatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(errorHandlingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peakPickingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(metadataFormatComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gzippedComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spectrumFormatComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 495, Short.MAX_VALUE)
                    .addComponent(errorHandlingComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(peakPickingComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spectrumFormatLabel)
                    .addComponent(spectrumFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(metadataFormatLabel)
                    .addComponent(metadataFormatComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gzippedLabel)
                    .addComponent(gzippedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peakPickingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peakPickingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errorHandlingLabel)
                    .addComponent(errorHandlingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(aboutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(githubLinkLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addGap(76, 76, 76)
                .addComponent(convertButton)
                .addGap(23, 23, 23))
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputAndOutputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputAndOutputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(githubLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(convertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addComponent(aboutButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Start the conversion.
     *
     * @param evt
     */
    private void convertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertButtonActionPerformed

        // prepare for processing
        progressJTextArea.setText(null);
        convertButton.setEnabled(false);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/ThermoRawFileParserGUI-orange.gif")));

        // full path to executable
        File thermoRawFileParserExecutable = new File(getJarFilePath(this.getClass().getResource("ThermoRawFileParserGUI.class").getPath(), "ThermoRawFileParserGUI")
                + File.separator + "resources" + File.separator + "ThermoRawFileParser" + File.separator + "ThermoRawFileParser.exe");
        thermoRawFileParserExecutable.setExecutable(true);

        // start the conversion
        new Thread(new Runnable() {
            public void run() {

                for (File tempRawFile : rawFiles) {

                    // clear the previous process
                    process_name_array.clear();

                    // use mono if not on windows
                    String operatingSystem = System.getProperty("os.name").toLowerCase();
                    if (!operatingSystem.contains("windows")) {
                        process_name_array.add("mono");
                    }

                    // add the executable
                    process_name_array.add(thermoRawFileParserExecutable.getAbsolutePath());

                    // add the conversion parameters
                    process_name_array.add("-i=" + tempRawFile.getAbsolutePath());
                    process_name_array.add("-o=" + outputFolderTextField.getText());
                    if (spectrumFormatComboBox.getSelectedIndex() < spectrumFormatComboBox.getItemCount() - 1) {
                        process_name_array.add("-f=" + spectrumFormatComboBox.getSelectedIndex());
                    }
                    if (metadataFormatComboBox.getSelectedIndex() < metadataFormatComboBox.getItemCount() - 1) {
                        process_name_array.add("-m=" + metadataFormatComboBox.getSelectedIndex());
                    }
                    if (gzippedComboBox.getSelectedIndex() == 0) {
                        process_name_array.add("-g");
                    }
                    if (peakPickingComboBox.getSelectedIndex() == 1) {
                        process_name_array.add("-p");
                    }
                    if (errorHandlingComboBox.getSelectedIndex() == 0) {
                        process_name_array.add("-e");
                    }

                    // print the command to the log area
                    if (debug) {
                        progressJTextArea.append("ThermoRawFileParser command:" + System.getProperty("line.separator"));
                        for (Object element : process_name_array) {
                            progressJTextArea.append(element + " ");
                        }
                        progressJTextArea.append(System.getProperty("line.separator") + System.getProperty("line.separator"));
                    }

                    // set up the process and redirect the error stream
                    pb = new ProcessBuilder(process_name_array);
                    pb.redirectErrorStream(true);

                    try {
                        p = pb.start();

                        // get the inputstream from the process
                        InputStream inputStream = p.getInputStream();
                        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                        String line;

                        while ((line = bufferedReader.readLine()) != null) {
                            progressJTextArea.append(line + System.getProperty("line.separator"));
                            progressJTextArea.setCaretPosition(progressJTextArea.getDocument().getLength());
                        }

                        inputStream.close();
                        bufferedReader.close();
                    } catch (IOException ex) {
                        progressJTextArea.append(ex.getMessage());
                        ex.printStackTrace();
                    } finally {
                        // wait for the process to terminate
                        try {
                            p.waitFor();
                            progressJTextArea.append(System.getProperty("line.separator") + "Conversion complete for " + tempRawFile.getAbsolutePath() + "." + System.getProperty("line.separator") + System.getProperty("line.separator"));
                            progressJTextArea.setCaretPosition(progressJTextArea.getDocument().getLength());
                        } catch (InterruptedException e) {
                            if (p != null) {
                                p.destroy();
                            }
                        }
                    }
                }

                progressJTextArea.append("Done.");
                progressJTextArea.setCaretPosition(progressJTextArea.getDocument().getLength());
                convertButton.setEnabled(true);
                setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icons/ThermoRawFileParserGUI.gif")));
            }
        }, "ConvertThread").start();

    }//GEN-LAST:event_convertButtonActionPerformed

    /**
     * Open the ThermoRawFileParserGUI GitHub page.
     *
     * @param evt
     */
    private void githubLinkLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_githubLinkLabelMouseClicked
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        BareBonesBrowserLaunch.openURL("https://github.com/compomics/ThermoRawFileParserGUI");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_githubLinkLabelMouseClicked

    /**
     * Change the cursor into a hand cursor.
     *
     * @param evt
     */
    private void githubLinkLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_githubLinkLabelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_githubLinkLabelMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void githubLinkLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_githubLinkLabelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_githubLinkLabelMouseExited

    /**
     * Change the cursor into a hand cursor.
     *
     * @param evt
     */
    private void aboutButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutButtonMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_aboutButtonMouseEntered

    /**
     * Change the cursor back to the default cursor.
     *
     * @param evt
     */
    private void aboutButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutButtonMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_aboutButtonMouseExited

    /**
     * Open the ThermoRawFileParserGUI GitHub page.
     *
     * @param evt
     */
    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        BareBonesBrowserLaunch.openURL("https://github.com/compomics/ThermoRawFileParserGUI");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_aboutButtonActionPerformed

    /**
     * Opens a file browser to select the raw file to convert.
     *
     * @param evt
     */
    private void browseRawFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseRawFileButtonActionPerformed

        JFileChooser fc = new JFileChooser();

        FileFilter filter = new FileFilter() {
            @Override
            public boolean accept(File myFile) {
                String lowercaseName = myFile.getName().toLowerCase();
                if (lowercaseName.endsWith(".raw")) {
                    return true;
                }
                return myFile.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Thermo Raw Files (.raw)";
            }
        };
        fc.setFileFilter(filter);
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setMultiSelectionEnabled(true);
        int result = fc.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {

            rawFiles = new ArrayList<>();

            for (File newFile : fc.getSelectedFiles()) {
                if (newFile.isDirectory()) {
                    File[] tempFiles = newFile.listFiles();
                    for (File file : tempFiles) {
                        String lowercaseName = file.getName().toLowerCase();
                        if (lowercaseName.endsWith(".raw")) {
                            rawFiles.add(file);
                        }
                    }
                } else {                    
                    String lowercaseName = newFile.getName().toLowerCase();
                    if (lowercaseName.endsWith(".raw")) {
                        rawFiles.add(newFile);
                    }
                }
            }

            if (rawFiles.size() == 1) {
                rawFileTextField.setText(rawFiles.get(0).getAbsolutePath());
            } else {
                rawFileTextField.setText(rawFiles.size() + " files selected");
            }

            if (rawFileTextField.getText().length() > 70) {
                rawFileTextField.setHorizontalAlignment(JTextField.LEADING);
            } else {
                rawFileTextField.setHorizontalAlignment(JTextField.CENTER);
            }
        }

        validateInput();

    }//GEN-LAST:event_browseRawFileButtonActionPerformed

    /**
     * Open a file browser to select the output folder.
     *
     * @param evt
     */
    private void browseOutputFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseOutputFolderButtonActionPerformed

        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(false);

        int result = fc.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {

            File tempDir = fc.getSelectedFile();

            if (!tempDir.exists()) {
                int value = JOptionPane.showConfirmDialog(this, "The folder \'" + tempDir.getAbsolutePath() + "\' does not exist.\n"
                        + "Do you want to create it?", "Create Folder?", JOptionPane.YES_NO_OPTION);
                if (value == JOptionPane.NO_OPTION) {
                    return;
                } else { // yes option selected
                    boolean success = tempDir.mkdir();

                    if (!success) {
                        JOptionPane.showMessageDialog(this, "Failed to create the folder. Please create it manually and then select it.",
                                "File Error", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    }
                }
            }

            File outputFolder = fc.getSelectedFile();
            outputFolderTextField.setText(outputFolder.getAbsolutePath());
            if (outputFolderTextField.getText().length() > 70) {
                outputFolderTextField.setHorizontalAlignment(JTextField.LEADING);
            } else {
                outputFolderTextField.setHorizontalAlignment(JTextField.CENTER);
            }
        }

        validateInput();
    }//GEN-LAST:event_browseOutputFolderButtonActionPerformed

    /**
     * Display the list of selected raw files.
     *
     * @param evt the mouse event
     */
    private void rawFileTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rawFileTextFieldMouseClicked
        if (!rawFiles.isEmpty()) {
            ArrayList<File> tempRawFiles = new ArrayList<>(rawFiles);
            FileDisplayDialog fileDisplayDialog = new FileDisplayDialog(this, tempRawFiles, true);
            if (!fileDisplayDialog.canceled()) {
                tempRawFiles = fileDisplayDialog.getSelectedFiles();

                if (tempRawFiles.size() == 1) {
                    rawFileTextField.setText(tempRawFiles.get(0).getAbsolutePath());
                } else {
                    rawFileTextField.setText(tempRawFiles.size() + " files selected");
                }

                rawFiles.clear();
                for (File file : tempRawFiles) {
                    rawFiles.add(file);
                }
                validateInput();
            }
        }
    }//GEN-LAST:event_rawFileTextFieldMouseClicked

    /**
     * Shut down the conversion process if the window is closed by the user.
     *
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (p != null) {
            p.destroy();
        }
    }//GEN-LAST:event_formWindowClosing

    private void spectrumFormatComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spectrumFormatComboBoxActionPerformed
        validateInput();
    }//GEN-LAST:event_spectrumFormatComboBoxActionPerformed

    private void metadataFormatComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metadataFormatComboBoxActionPerformed
        validateInput();
    }//GEN-LAST:event_metadataFormatComboBoxActionPerformed

    /**
     * The main method used to start ThermoRawFileParserGUI.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(ThermoRawFileParserGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }

        // need to add some padding to the text in the titled borders on Java 1.7 
        if (!System.getProperty("java.version").startsWith("1.6")) {
            TITLED_BORDER_HORIZONTAL_PADDING = "   ";
        }

        /* Create and display the form */
        new ThermoRawFileParserGUI();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton browseOutputFolderButton;
    private javax.swing.JButton browseRawFileButton;
    private javax.swing.JButton convertButton;
    private javax.swing.JComboBox<String> errorHandlingComboBox;
    private javax.swing.JLabel errorHandlingLabel;
    private javax.swing.JLabel githubLinkLabel;
    private javax.swing.JComboBox<String> gzippedComboBox;
    private javax.swing.JLabel gzippedLabel;
    private javax.swing.JPanel inputAndOutputPanel;
    private javax.swing.JComboBox<String> metadataFormatComboBox;
    private javax.swing.JLabel metadataFormatLabel;
    private javax.swing.JLabel outputFolderLabel;
    private javax.swing.JTextField outputFolderTextField;
    private javax.swing.JComboBox<String> peakPickingComboBox;
    private javax.swing.JLabel peakPickingLabel;
    private javax.swing.JTextArea progressJTextArea;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JScrollPane progressScrollPane;
    private javax.swing.JLabel rawFileLabel;
    private javax.swing.JTextField rawFileTextField;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JComboBox<String> spectrumFormatComboBox;
    private javax.swing.JLabel spectrumFormatLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns the path to the jar file. Verifies that the path exists and tries
     * to decode from Unicode if not.
     *
     * @param classPath the class path to extract the jar file path from
     * @param toolName the name of the tool, e.g., "PeptideShaker" or
     * "SearchGUI".
     * @return the path to the jar file
     */
    public static String getJarFilePath(String classPath, String toolName) {

        String path = classPath;
        toolName = toolName + "-";

        if (path.lastIndexOf("/" + toolName) != -1) {
            // remove starting 'file:' tag if there
            if (path.startsWith("file:")) {
                path = path.substring("file:".length(), path.lastIndexOf("/" + toolName));
            } else {
                path = path.substring(0, path.lastIndexOf("/" + toolName));
            }
            path = path.replace("%20", " ");
            path = path.replace("%5b", "[");
            path = path.replace("%5d", "]");

            if (System.getProperty("os.name").lastIndexOf("Windows") != -1) {
                path = path.replace("/", "\\");
            }
        } else {
            path = ".";
        }

        // try to decode the path to fix any special characters
        try {
            if (!new File(path).exists()) {
                path = URLDecoder.decode(path, "UTF-8");
            }
            if (!new File(path).exists()) {
                System.out.println(path + " not found!");
                FileNotFoundException ex = new FileNotFoundException(path + " not found!");
                ex.printStackTrace();
            }
        } catch (UnsupportedEncodingException ex) {
            System.out.println("Error reading file " + path + "!");
            ex.printStackTrace();
        }

        return path;
    }

    /**
     * Validate that the required input as been provided and enable or disable
     * the convert button.
     */
    private void validateInput() {
        convertButton.setEnabled(rawFileTextField.getText().length() > 0 && outputFolderTextField.getText().length() > 0
                && !(spectrumFormatComboBox.getSelectedIndex() == spectrumFormatComboBox.getItemCount() - 1
                && metadataFormatComboBox.getSelectedIndex() == metadataFormatComboBox.getItemCount() - 1));
    }
}
